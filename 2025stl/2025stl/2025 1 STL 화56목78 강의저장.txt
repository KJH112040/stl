// -----------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 6일 목요일				(1주 2일)
//------------------------------------------------------------------------------------------------
//	컴파일 환경 확인 / 한 학기 강의를 저장할 save 만들기
//------------------------------------------------------------------------------------------------
//	VS 버젼 - 17.13 이상
//	Release / x64, C++ 언어 표준 - std::C++latest, SDL 검사 - 아니요
//------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>

//	[문제] save 함수를 제대로 코딩하라.
void save(std::string_view);
//	C++ 사용 x	
//	1. T[];	--->	array<T,N>
//	2. char*	---->	srting
// 	3. T*	--->	unique str...ㅠ 못 적음

//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

//------------------------------
void save(std::string_view fileName)
//------------------------------
{
	//	fileName를 읽기모드로 연다	ifstream
	std::ifstream in{ fileName.data() };	//	RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다." << std::endl;
		exit(20250306);
	}

	//	쓰기 모드로 저장할 파일을 연다	ofstream
	std::ofstream out{ "2025 1 STL 화56목78 강의저장.txt",std::ios::app };

	//	읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	/*
	char c;
	while (in >> c)			in>>c 고급I/O : in.operator>>(c)	, operator>>(in,c)
		out << c;
	*/
	char c;
	in >> std::noskipws;
	while (in >> c)
		out << c;

}


// -----------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 6일 목요일				(1주 2일)
//------------------------------------------------------------------------------------------------
//	컴파일 환경 확인 / 한 학기 강의를 저장할 save 만들기
//------------------------------------------------------------------------------------------------
//	VS 버젼 - 17.13 이상
//	Release / x64, C++ 언어 표준 - std::C++latest, SDL 검사 - 아니요
//------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include<vector>
#include<algorithm>

//	[문제] save 함수를 제대로 코딩하라.
void save(std::string_view);
//	C++ 사용 x	
//	1. T[];	--->	array<T,N>
//	2. char*	---->	srting
// 	3. T*	--->	unique str...ㅠ 못 적음

//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

//------------------------------
void save(std::string_view fileName)
//------------------------------
{
	//	fileName를 읽기모드로 연다	ifstream
	std::ifstream in{ fileName.data() };	//	RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다." << std::endl;
		exit(20250306);
	}

	//	쓰기 모드로 저장할 파일을 연다	ofstream
	std::string nameToSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameToSave,std::ios::app };

	//	저장했다고 화면 출력한다.
	auto size = std::filesystem::file_size(fileName);
	std::cout <<"\"" << nameToSave << "에 " << fileName << "을 덧붙였습니다. - " 
		<< size << " bytes\"" << std::endl;

	//	읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::vector<char> v(size);
	std::copy(std::istreambuf_iterator{ in }, {}, v.begin());
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator{ out });
}                  


// -----------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 6일 목요일				(1주 2일)
//------------------------------------------------------------------------------------------------
//	컴파일 환경 확인 / 한 학기 강의를 저장할 save 만들기
//------------------------------------------------------------------------------------------------
//	VS 버젼 - 17.13 이상
//	Release / x64, C++ 언어 표준 - std::C++latest, SDL 검사 - 아니요
//------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include<vector>
#include<algorithm>
#include<chrono>

//	[문제] save 함수를 제대로 코딩하라.
void save(std::string_view);
//	C++ 사용 x	
//	1. T[];	--->	array<T,N>
//	2. char*	---->	srting
// 	3. T*	--->	unique str...ㅠ 못 적음

//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

//------------------------------
void save(std::string_view fileName)
//------------------------------
{
	//	fileName를 읽기모드로 연다	ifstream
	std::ifstream in{ fileName.data() };	//	RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다." << std::endl;
		exit(20250306);
	}

	//	쓰기 모드로 저장할 파일을 연다	ofstream
	std::string nameToSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameToSave,std::ios::app };

	//	저장했다고 화면 출력한다.
	auto size = std::filesystem::file_size(fileName);
	std::cout <<"\"" << nameToSave << "에 " << fileName << "을 덧붙였습니다. - " 
		<< size << " bytes\"" << std::endl;

	//	저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();	//	time_point를 얻는다 epoch:1970년 1월 1일 자정
	using namespace std::chrono_literals;
	std::cout << now + 9h << std::endl;

	//	읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-06 오후 5:03:14 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 6일 목요일				(1주 2일)
//------------------------------------------------------------------------------------------------
//	컴파일 환경 확인 / 한 학기 강의를 저장할 save 만들기
//------------------------------------------------------------------------------------------------
//	VS 버젼 - 17.13 이상
//	Release / x64, C++ 언어 표준 - std::C++latest, SDL 검사 - 아니요
//------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include<vector>
#include<algorithm>
#include<chrono>

//	[문제] save 함수를 제대로 코딩하라.
void save(std::string_view);
//	C++ 사용 x	
//	1. T[];	--->	array<T,N>
//	2. char*	---->	srting
// 	3. T*	--->	unique str...ㅠ 못 적음

//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

//------------------------------
void save(std::string_view fileName)
//------------------------------
{
	//	fileName를 읽기모드로 연다	ifstream
	std::ifstream in{ fileName.data() };	//	RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다." << std::endl;
		exit(20250306);
	}

	//	쓰기 모드로 저장할 파일을 연다	ofstream
	std::string nameToSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameToSave,std::ios::app };

	//	저장했다고 화면 출력한다.
	auto size = std::filesystem::file_size(fileName);
	std::cout <<"\"" << nameToSave << "에 " << fileName << "을 덧붙였습니다. - " 
		<< size << " bytes\"" << std::endl;

	//	저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();			//	time_point를 얻는다 epoch:1970년 1월 1일 자정
	auto utc = std::chrono::system_clock::to_time_t(now);	//	UTC 시간으로 변경
	auto lt = std::localtime(&utc);							//	지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);		//	원래 locale을 복구
	
	//	읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-06 오후 5:06:30 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 6일 목요일				(1주 2일)
//------------------------------------------------------------------------------------------------
//	컴파일 환경 확인 / 한 학기 강의를 저장할 save 만들기
//	과제 - save를 save.cpp로 분리하라.
//------------------------------------------------------------------------------------------------
//	VS 버젼 - 17.13 이상
//	Release / x64, C++ 언어 표준 - std::C++latest, SDL 검사 - 아니요
//------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include<vector>
#include<algorithm>
#include<chrono>

//	[문제] save 함수를 제대로 코딩하라.
void save(std::string_view);
//	C++ 사용 x	
//	1. T[];	--->	array<T,N>
//	2. char*	---->	srting
// 	3. T*	--->	unique str...ㅠ 못 적음

//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

//------------------------------
void save(std::string_view fileName)
//------------------------------
{
	//	fileName를 읽기모드로 연다	ifstream
	std::ifstream in{ fileName.data() };	//	RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다." << std::endl;
		exit(20250306);
	}

	//	쓰기 모드로 저장할 파일을 연다	ofstream
	std::string nameToSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameToSave,std::ios::app };

	//	저장했다고 화면 출력한다.
	auto size = std::filesystem::file_size(fileName);
	std::cout <<"\"" << nameToSave << "에 " << fileName << "을 덧붙였습니다. - " 
		<< size << " bytes\"" << std::endl;

	//	저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();			//	time_point를 얻는다 epoch:1970년 1월 1일 자정
	auto utc = std::chrono::system_clock::to_time_t(now);	//	UTC 시간으로 변경
	auto lt = std::localtime(&utc);							//	지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);		//	원래 locale을 복구
	
	//	읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 1:42:23 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	save 파일로 분리 / template 복습
//------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include<vector>
#include<algorithm>
#include<chrono>

//	[문제] save 함수를 제대로 코딩하라.
void save(std::string_view fileName);

//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}

//------------------------------
void save(std::string_view fileName)
//------------------------------
{
	//	fileName를 읽기모드로 연다	ifstream
	std::ifstream in{ fileName.data() };	//	RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다." << std::endl;
		exit(20250306);
	}

	//	쓰기 모드로 저장할 파일을 연다	ofstream
	std::string nameToSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameToSave,std::ios::app };

	//	저장했다고 화면 출력한다.
	auto size = std::filesystem::file_size(fileName);
	std::cout << "\"" << nameToSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << " bytes\"" << std::endl;

	//	저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();			//	time_point를 얻는다 epoch:1970년 1월 1일 자정
	auto utc = std::chrono::system_clock::to_time_t(now);	//	UTC 시간으로 변경
	auto lt = std::localtime(&utc);							//	지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);		//	원래 locale을 복구

	//	읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 1:48:44 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	save 파일로 분리 / template 복습
//------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//	[문제] save 기능을 파일로 분리하라


//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-11 오후 1:51:59 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	save 파일로 분리 / template 복습
//------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//	[문제] save 기능을 파일로 분리하라


//---------
int main() 
//---------
{
	std::cout << "2025 STL" << std::endl;
	
	save("main.cpp");
	save("save.h");
	save("save.cpp");
}


=================================================
저장한 시간: 2025-03-11 오후 1:51:59 화요일
=================================================

//----------------------------------------------------------------------------
//	save.h													2025년 3월 11일
//----------------------------------------------------------------------------
#pragma once
void save(std::string_view);


=================================================
저장한 시간: 2025-03-11 오후 1:51:59 화요일
=================================================

//----------------------------------------------------------------------------
//	save.cpp												2025년 3월 11일
//
//	한 학기 강의를 덧붙여 저장하는 함수 입니다.
//----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include<chrono>

//------------------------------
void save(std::string_view fileName)
//------------------------------
{
	//	fileName를 읽기모드로 연다	ifstream
	std::ifstream in{ fileName.data() };	//	RAII
	if (not in) {
		std::cout << fileName << "을 열 수 없습니다." << std::endl;
		exit(20250306);
	}

	//	쓰기 모드로 저장할 파일을 연다	ofstream
	std::string nameToSave{ "2025 1 STL 화56목78 강의저장.txt" };
	std::ofstream out{ nameToSave,std::ios::app };

	//	저장했다고 화면 출력한다.
	auto size = std::filesystem::file_size(fileName);
	std::cout << "\"" << nameToSave << "에 " << fileName << "을 덧붙였습니다. - "
		<< size << " bytes\"" << std::endl;

	//	저장한 시간을 파일에 기록하자
	auto now = std::chrono::system_clock::now();			//	time_point를 얻는다 epoch:1970년 1월 1일 자정
	auto utc = std::chrono::system_clock::to_time_t(now);	//	UTC 시간으로 변경
	auto lt = std::localtime(&utc);							//	지역달력 시간으로
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n' << '\n';
	out << "=================================================" << '\n';
	out << "저장한 시간: " << std::put_time(lt, "%c %A") << '\n';
	out << "=================================================" << '\n';
	out << '\n';

	out.imbue(old);		//	원래 locale을 복구

	//	읽을 파일에 있는 모든 내용을 읽어 쓸 파일에 덧붙여 쓴다
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator{ out });
}


=================================================
저장한 시간: 2025-03-11 오후 2:03:07 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	template 복습
//------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 우리는 이렇게 하면 안된다.

//	[문제] main을 수정하지 말고 의도대로 실행되게 하라
void change(int&, int&);

//---------
int main() 
//---------
{
	int a{ 1 }, b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;		// 의도 - 2, 1 이 출력되어야 한다

	save("main.cpp");
}

void change(int& a, int& b) {
	int t{a};
	a = b;
	b = t;
}


=================================================
저장한 시간: 2025-03-11 오후 2:26:52 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	template 복습
//------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 우리는 이렇게 하면 안된다.

//	[문제] main을 수정하지 말고 의도대로 실행되게 하라
class Dog {
public:
	Dog() {};
	Dog(int n) :num{ n } {};
	
	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}

private:
	int num{};
};

void change(int&, int&);
void change(Dog&, Dog&);

//---------
int main() 
//---------
{
	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << endl;		// 의도 - 2, 1 이 출력되어야 한다
	}

	{
		int a{ 1 }, b{ 2 };

		change(a, b);

		cout << a << ", " << b << endl;		// 의도 - 2, 1 이 출력되어야 한다
	}

	save("main.cpp");
}

void change(int& a, int& b) {
	int t{a};
	a = b;
	b = t;
}

void change(Dog& a, Dog& b) {
	Dog t{ a };
	a = b;		// a.operator=(b)
	b = t;
}


=================================================
저장한 시간: 2025-03-11 오후 2:36:45 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	template 복습
//------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 우리는 이렇게 하면 안된다.

//	[문제] C++ 언어에서 change 함수는 몇 번이나 overloading 해야 할까?
//	---> C++ 언어의 자료형은 몇 개인가? ---> 무한하다

class Dog {
public:
	Dog() {};
	Dog(int n) :num{ n } {};
	
	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}

private:
	int num{};
};

template<class T>
void change(T&, T&);

//---------
int main() 
//---------
{
	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << endl;		// 의도 - 2, 1 이 출력되어야 한다
	}

	{
		int a{ 1 }, b{ 2 };

		change(a, b);

		cout << a << ", " << b << endl;		// 의도 - 2, 1 이 출력되어야 한다
	}

	save("main.cpp");
}

template <class T>
void change(T& a, T& b) {
	T t{a};
	a = b;
	b = t;
}


=================================================
저장한 시간: 2025-03-11 오후 2:54:56 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	template 복습
//------------------------------------------------------------------------------------------------
// iostream standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef _IOSTREAM_
#define _IOSTREAM_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#include <istream>
#include <ostream>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new
_STD_BEGIN
#ifdef _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern istream cin;
__PURE_APPDOMAIN_GLOBAL extern ostream cout;
__PURE_APPDOMAIN_GLOBAL extern ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream clog;
__PURE_APPDOMAIN_GLOBAL extern istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wclog;
#else // ^^^ defined(_M_CEE_PURE) / !defined(_M_CEE_PURE) vvv
_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT istream cin;
_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT ostream cout;
_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT ostream cerr;
_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT ostream clog;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT istream* _Ptr_cin;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT ostream* _Ptr_cout;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT ostream* _Ptr_cerr;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT ostream* _Ptr_clog;

_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wistream wcin;
_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wostream wcout;
_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wostream wcerr;
_EXPORT_STD extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wostream wclog;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wistream* _Ptr_wcin;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wostream* _Ptr_wcout;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wostream* _Ptr_wcerr;
extern "C++" __PURE_APPDOMAIN_GLOBAL _CRTDATA2_IMPORT wostream* _Ptr_wclog;

#ifdef _CRTBLD // TRANSITION, ABI: _Winit appears to be unused
class _CRTIMP2_PURE_IMPORT _Winit {
public:
	__thiscall _Winit();
	__thiscall ~_Winit() noexcept;

private:
	__PURE_APPDOMAIN_GLOBAL static int _Init_cnt;
};
#endif // defined(_CRTBLD)

#endif // ^^^ !defined(_M_CEE_PURE) ^^^
_STD_END
#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _IOSTREAM_
#include "save.h"
using namespace std;			// 우리는 이렇게 하면 안된다.

//	[문제] C++ 언어에서 change 함수는 몇 번이나 overloading 해야 할까?
//	---> C++ 언어의 자료형은 몇 개인가? ---> 무한하다

class Dog {
public:
	Dog() {};
	Dog(int n) :num{ n } {};
	
	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}

private:
	int num{};
};

template <class T>
void change(T& a, T& b) 
{
	T t{ a };
	a = b;
	b = t;
}

//---------
int main() 
//---------
{
	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		// 1. change(Dog, Dog);
		// 2. change(Dog&, Dog&);
		// 3. 컴파일러가 template을 이용하여 코드 생성
		cout << a << ", " << b << endl;		// 의도 - 2, 1 이 출력되어야 한다
	}

	{
		int a{ 1 }, b{ 2 };

		change(a, b);

		cout << a << ", " << b << endl;		// 의도 - 2, 1 이 출력되어야 한다
	}

	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-11 오후 3:07:15 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<random>
#include "save.h"
using namespace std;

//	[문제] 랜덤 int 1000개를 생성하여 화면에 출력하라
default_random_engine dre;
uniform_int_distribution<int> uid{0,999'9999};

//---------
int main() 
//---------
{
	for (int i = 0; i < 1000; ++i) {
		if (i % 100 == 0)cout << '\n';
		cout << uid(dre) << " ";
		cout << endl;
	}
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-11 오후 3:08:33 화요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 11일 화요일				(2주 1일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<print>
#include<random>
#include "save.h"
using namespace std;

//	[문제] 랜덤 int 1000개를 생성하여 화면에 출력하라
default_random_engine dre;
uniform_int_distribution<int> uid{0,999'9999};

//---------
int main() 
//---------
{
	for (int i = 0; i < 1000; ++i) {
		print("{:8}", uid(dre));
	}
	cout << endl;
	
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 3:37:24 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<print>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{ random_device{}()};
uniform_int_distribution<int> uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 메모리에 저장하라
//	가장 큰 값을 찾아 화면에 출력하라

//---------
int main() 
//---------
{
	for (int i = 0; i < 1000; ++i) {
		print("{:8}", uid(dre));
	}
	cout << endl;
	
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 3:52:32 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<print>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 메모리에 저장하라
//	저장된 값 중에서 가장 큰 값을 찾아 화면에 출력하라		(5분)

//---------
int main() 
//---------
{
	// T[N]
	int arr[1'000];
	for (int i = 0; i < 1000; ++i)
		arr[i] = uid(dre);
	
	int maxValue{ numeric_limits<int>::min() };
	
	for (int i = 0; i < 1000; ++i) {
		if (maxValue < arr[i])
			maxValue = arr[i];
	}
	
	cout << "최댓값 - " << maxValue << endl;
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:10:02 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<print>		// C++ 23
#include<array>
#include<algorithm>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 메모리에 저장하라
//	저장된 값 중에서 가장 큰 값을 찾아 화면에 출력하라		(5분)

//---------
int main() 
//---------
{
	array<int, 1'000> arr;				// T[N]	<< STL에서는 빵점처리... --------> array<T,N>

	for (int& num: arr)		// magic number, hard-wired : for-loop에 뭘 의미하는 지 모를 숫자를 적는,,,거,,, ex) i < 1'000
		num = uid(dre);
	
	auto 위치 = max_element(arr.begin(), arr.end());
	
	cout << "최댓값 - " << *위치 << endl;
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:11:04 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<print>		// C++ 23
#include<array>
#include<algorithm>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 메모리에 저장하라
//	저장된 값 중에서 가장 큰 값을 찾아 화면에 출력하라		(5분)

//---------
int main() 
//---------
{
	array<int, 1'000> arr;				// T[N]	<< STL에서는 빵점처리... --------> array<T,N>

	for (int& num: arr)		// magic number, hard-wired : for-loop에 뭘 의미하는 지 모를 숫자를 적는,,,거,,, ex) i < 1'000
		num = uid(dre);
	
	cout << "최댓값 - " << *max_element(arr.begin(), arr.end()) << endl;
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:25:55 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<print>		// C++ 23
#include<array>
#include<algorithm>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 파일"int 1000개.txt"에 텍스트 모드로 저장하라.
//	파일을 열었을 때 사람이 읽을 수 있어야 한다.
//	파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

//---------
int main() 
//---------
{
	for (int i = 0; i < 1'000; ++i)
		print("{:<8}",uid(dre));
	
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:26:13 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<print>		// C++ 23
#include<array>
#include<algorithm>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 파일"int 1000개.txt"에 텍스트 모드로 저장하라.
//	파일을 열었을 때 사람이 읽을 수 있어야 한다.
//	파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

//---------
int main() 
//---------
{
	for (int i = 0; i < 1'000; ++i)
		print("{:^8}",uid(dre));
	
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:31:09 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<print>		// C++ 23
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 파일"int 1000개.txt"에 텍스트 모드로 저장하라.
//	파일을 열었을 때 사람이 읽을 수 있어야 한다.
//	파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

//---------
int main() 
//---------
{
	ofstream out{ "int 1000개.txt" };		// RAII
											// ios::text는 없음 text는 defalut임. 아무것도 안 하면 그게 text mode

	for (int i = 0; i < 1'000; ++i)
		print(out,"{:8}",uid(dre));			// 아무것도 안 쓰면 cout에 쓰지만, 앞에 인자 적어주면 저 변수에다? 씀.
	
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:37:31 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<print>		// C++ 23
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 파일"int 1000개.txt"에 텍스트 모드로 저장하라.
//	파일을 열었을 때 사람이 읽을 수 있어야 한다.
//	파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

//---------
int main() 
//---------
{
	ofstream out{ "int 1000개.txt" };		// RAII
											// ios::text는 없음 text는 defalut임. 아무것도 안 하면 그게 text mode

	for (int i = 0; i < 1'000; ++i)
		print(out,"{:8} *** ",uid(dre));			// 아무것도 안 쓰면 cout에 쓰지만, 앞에 인자 적어주면 저 변수에다? 씀.
	
	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:40:05 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<print>		// C++ 23
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre{};
uniform_int_distribution uid{ 0,999'9999 };

//	[문제] 랜덤 int 1000개를 파일"int 1000개.txt"에 텍스트 모드로 저장하라.
//	파일을 열었을 때 사람이 읽을 수 있어야 한다.
//	파일을 읽어 원래 int 값을 가져올 수 있어야 한다.

//---------
int main() 
//---------
{
	ofstream out{ "int 1000개.txt" };		// RAII
											// ios::text는 없음 text는 defalut임. 아무것도 안 하면 그게 text mode

	int count{};
	for (int i = 0; i < 1'000; ++i) {
		print(out, "{:8}", uid(dre));			// 아무것도 안 쓰면 cout에 쓰지만, 앞에 인자 적어주면 저 변수에다? 씀.
		if (not(++count % 10))
			out << endl;
	}

	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:52:06 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include "save.h"
using namespace std;

//	[문제] 파일 "int 1000개.txt"에는 int 값 1000개가 text로 기록되어 있다.
//	가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.	(5분)

//---------
int main() 
//---------
{
	ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	int num, maxValue{numeric_limits<int>::min()};
	size_t cnt{ };

	while (in >> num) {
		++cnt;
		if (num > maxValue)
			maxValue = num;
	}
	cout << "읽은 개수 - " << cnt << endl;
	cout << "최댓값 - " << maxValue << endl;

	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:58:46 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<algorithm>
#include "save.h"
using namespace std;

//	[문제] 파일 "int 1000개.txt"에는 int 값 1000개가 text로 기록되어 있다.
//	가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.	(5분)

//---------
int main() 
//---------
{
	ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	cout<< "최댓값 - "<< *max_element(istream_iterator<int>{in}, {})<<endl;
	// max_element는 위치를 알려주는데, *를 치면 그 위치에 있는 값을 알려줌.

	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 4:59:12 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<algorithm>
#include "save.h"
using namespace std;

//	[문제] 파일 "int 1000개.txt"에는 int 값 1000개가 text로 기록되어 있다.
//	가장 큰 값을 찾아 화면에 출력하라. 출력된 값이 무엇인지도 답지에 써라.	(5분)

//---------
int main() 
//---------
{
	ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	cout<< "최댓값: "<< *max_element(istream_iterator<int>{in}, {})<<endl;
	// max_element는 위치를 알려주는데, *를 치면 그 위치에 있는 값을 알려줌.

	save("main.cpp");
}


=================================================
저장한 시간: 2025-03-13 오후 5:10:51 목요일
=================================================

//------------------------------------------------------------------------------------------------
//	2025 STL 화56목78	3월 13일 목요일				(2주 2일)
//------------------------------------------------------------------------------------------------
//	많은 수의 자료를 처리하기	-	파일에 저장하고 읽어 오기
//------------------------------------------------------------------------------------------------
#include <iostream>
#include<fstream>
#include<algorithm>
#include<array>
#include<print>
#include "save.h"
using namespace std;

//	[문제] 파일 "int 1000개.txt"에는 int 값 1000개가 text로 기록되어 있다.
//	이 데이터를 메모리에 저장하라.
//	메모리에 있는 데이터를 화면에 출력하라.		(5분)

//---------
int main() 
//---------
{
	ifstream in{ "int 1000개.txt" };
	if (not in)
		return 20250313;

	array<int, 1000> arr;
	int num;/*, cnt{0};
	while (in >> num) {
		in >> arr[cnt];
		++cnt;
	}*/
	for (int i = 0; i < 1000; ++i) {
		in >> num;
		arr[i] = num;
	}

	for (int num : arr)
		print("{:8}", num);

	save("main.cpp");
}